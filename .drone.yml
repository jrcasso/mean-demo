---
# Shared node_modules between subsequent tests imposes
# DAG dependencies that are not conducive for multiple
# parallel pipelines; a refined solution must be found.
#
# TODO: Improve Inspection Pipeline:
#  - Additional linters
#  - Security vulnerability scanners
#  - AST optimization checks? (if possible)
# TODO: Build pipeline
# TODO: Deploy pipeline (partially)
# TODO: Regression pipeline
# TODO: Manual promotion pipelines (continuous process; iterative)

kind: pipeline
type: docker
name: Inspection & Testing

platform:
  os: linux
  arch: amd64

trigger:
  event:
    - pull_request
    - push
    - tag

services:
- name: mongo
  image: mongo:latest

steps:
- name: "Install: frontend"
  image: node:latest
  depends_on: ["clone"]
  commands:
    - cd frontend && npm install

- name: "Install: backend"
  image: node:latest
  depends_on: ["clone"]
  commands:
    - cd backend && npm install

- name: express
  image: node:latest
  detach: true
  depends_on: ["Install: backend"]
  commands:
    - cd backend/
    - node_modules/.bin/nodemon backend/app.js

- name: "Lint: Shell files"
  image: koalaman/shellcheck-alpine:latest
  depends_on: [ clone ]
  commands:
    - /bin/shellcheck ./*.sh

- name: "Lint - Terraform"
  image: hashicorp/terraform:0.12.26
  depends_on: [ clone ]
  commands:
  - terraform fmt -check -diff -recursive terraform

- name: "Lint: Dockerfiles"
  image: hadolint/hadolint:latest-alpine
  depends_on: [ clone ]
  commands:
    - hadolint ./frontend/Dockerfile ./backend/Dockerfile

- name: "Lint: Backend TypeScript"
  image: node:latest
  # Currently depends on package installation for usage of npx
  depends_on: [ clone, "Install: backend" ]
  commands:
    - cd backend/
    - npx eslint .

- name: "Lint: Frontend TypeScript"
  image: node:latest
  # Currently depends on package installation for usage of npx
  depends_on: [ clone, "Install: frontend" ]
  commands:
    - cd frontend/
    - npx tslint -c tslint.json --project './'

- name: "Unit Tests: frontend"
  image: trion/ng-cli-karma:9.0.6
  depends_on: ["Install: frontend"]
  commands:
    - cd frontend/
    - ng test --progress false --watch false

- name: "e2e Tests: backend"
  image: node:latest
  depends_on: ["express"]
  commands:
    - sleep 15
    - cd backend/
    - npx jasmine --config=jasmine.e2e.json

- name: "e2e Tests: frontend"
  image: trion/ng-cli-e2e:9.0.6
  depends_on: ["Unit Tests: frontend"]
  commands:
    - cd frontend/
    - ./node_modules/protractor/node_modules/webdriver-manager/bin/webdriver-manager update --versions.chrome 2.41
    - ng e2e --webdriver-update=false --protractor-config=e2e/protractor-ci.conf.js

---
kind: pipeline
type: docker
name: Building & Planning

platform:
  os: linux
  arch: amd64

trigger:
  event:
    - pull_request
    - push
    - tag

depends_on:
- "Inspection & Testing"


steps:
# - name: "Plan - Stage"
#   image: hashicorp/terraform:0.12.26
#   depends_on: [ clone ]
#   environment:
#     AWS_DEFAULT_REGION:
#       from_secret: AWS_DEFAULT_REGION
#     AWS_SECRET_ACCESS_KEY:
#       from_secret: AWS_SECRET_ACCESS_KEY
#     AWS_ACCESS_KEY_ID:
#       from_secret: AWS_ACCESS_KEY_ID
#   when:
#     branch:
#       exclude:
#       - master
#     event:
#       exclude:
#       - pull_request
#   commands:
#   - cd terraform/stage
#   - terraform init -backend-config=backend-config
#   - terraform validate
#   - terraform plan

# - name: "Plan - Production"
#   image: hashicorp/terraform:0.12.26
#   depends_on: [ clone ]
#   environment:
#     AWS_DEFAULT_REGION:
#       from_secret: AWS_DEFAULT_REGION
#     AWS_SECRET_ACCESS_KEY:
#       from_secret: AWS_SECRET_ACCESS_KEY
#     AWS_ACCESS_KEY_ID:
#       from_secret: AWS_ACCESS_KEY_ID
#   when:
#     branch:
#     - master
#     - rc*
#     event:
#       exclude:
#       - pull_request
#   commands:
#   - cd terraform/production
#   - terraform init -backend-config=backend-config
#   - terraform validate
#   - terraform plan

- name: "Build: frontend"
  image: plugins/docker
  depends_on: [ clone ]
  when:
    event:
      exclude:
      - pull_request
  settings:
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password
    repo: jrcasso/mean-demo-frontend
    dockerfile: ./frontend/Dockerfile
    context: ./frontend
    tags:
    - "${CI_COMMIT_SHA}"
    - "${DRONE_BRANCH}"

- name: "Build: backend"
  image: plugins/docker
  depends_on: [ clone ]
  when:
    event:
      exclude:
      - pull_request
  settings:
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password
    repo: jrcasso/mean-demo-backend
    dockerfile: ./backend/Dockerfile
    context: ./backend
    tags:
    - "${CI_COMMIT_SHA}"
    - "${DRONE_BRANCH}"

# ---
# kind: pipeline
# type: docker
# name: Deploy

# platform:
#   os: linux
#   arch: amd64

# trigger:
#   branch:
#   - master
#   - develop
#   event:
#   - push

# depends_on:
# - "Building & Planning"


# steps:
# - name: "Apply - Stage"
#   image: hashicorp/terraform:0.12.26
#   depends_on: [ clone ]
#   environment:
#     AWS_DEFAULT_REGION:
#       from_secret: AWS_DEFAULT_REGION
#     AWS_SECRET_ACCESS_KEY:
#       from_secret: AWS_SECRET_ACCESS_KEY
#     AWS_ACCESS_KEY_ID:
#       from_secret: AWS_ACCESS_KEY_ID
#   when:
#     branch:
#     - develop
#   commands:
#   - cd terraform/stage
#   - terraform init -backend-config=backend-config
#   - terraform apply -auto-approve

# - name: "Apply - Production"
#   image: hashicorp/terraform:0.12.26
#   depends_on: [ clone ]
#   environment:
#     AWS_DEFAULT_REGION:
#       from_secret: AWS_DEFAULT_REGION
#     AWS_SECRET_ACCESS_KEY:
#       from_secret: AWS_SECRET_ACCESS_KEY
#     AWS_ACCESS_KEY_ID:
#       from_secret: AWS_ACCESS_KEY_ID
#   when:
#     branch:
#     - master
#   commands:
#   - cd terraform/production
#   - terraform init -backend-config=backend-config
#   - terraform apply -auto-approve


# ---
# kind: pipeline
# type: docker
# name: Infrastructure

# platform:
#   os: linux
#   arch: amd64

# trigger:
#   event:
#   - promote
#   target:
#   - destroy-stage
#   - apply-stage


# steps:
# - name: "Manual Destroy - Stage"
#   image: hashicorp/terraform:0.12.26
#   depends_on: [ clone ]
#   environment:
#     AWS_DEFAULT_REGION:
#       from_secret: AWS_DEFAULT_REGION
#     AWS_SECRET_ACCESS_KEY:
#       from_secret: AWS_SECRET_ACCESS_KEY
#     AWS_ACCESS_KEY_ID:
#       from_secret: AWS_ACCESS_KEY_ID
#   commands:
#   - cd terraform/stage
#   - terraform init -backend-config=backend-config
#   - terraform destroy -auto-approve
#   when:
#     target:
#     - destroy-stage

# - name: "Manual Apply - Stage"
#   image: hashicorp/terraform:0.12.26
#   depends_on: [ clone ]
#   environment:
#     AWS_DEFAULT_REGION:
#       from_secret: AWS_DEFAULT_REGION
#     AWS_SECRET_ACCESS_KEY:
#       from_secret: AWS_SECRET_ACCESS_KEY
#     AWS_ACCESS_KEY_ID:
#       from_secret: AWS_ACCESS_KEY_ID
#   when:
#     target:
#     - apply-stage
#   commands:
#   - cd terraform/stage
#   - terraform init -backend-config=backend-config
#   - terraform apply -auto-approve
#   when:
#     target:
#     - apply-stage


---
kind: signature
hmac: 63f5be523e3cae8284de5b6c79bef9db93706c0df6dd6588d7e9f478468cbb00

...
